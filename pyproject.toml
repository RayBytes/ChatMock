[project]
dependencies = [
  "typer",
  "rich",
  "pytest",
  "pytest-mock",
  "pytest-cov",
  "pytest-timeout",
  "pytest-clarity", # Better assertion failure messages
  "pytest-sugar", # Colorful, animated test output
  "pytest-emoji", # Add emoji to test results
  "pytest-benchmark", # Performance benchmarking with statistics
  "pytest-instafail", # Show failures instantly, don't wait for end
  # "pytest-rerunfailures", # Retry flaky tests automatically - DISABLED: incompatible with execnet 2.x
  "pytest-randomly", # Randomize test order to catch dependencies
  "pytest-asyncio", # Better async/await test support
  "pytest-ruff", # Ruff linting integration (fast, comprehensive)
  "pytest-mypy", # Type checking
  "coverage",
  # "pytest-xdist", # DISABLED: incompatible with execnet 2.x
  "pip-audit",
  "tomli; python_version < '3.11'",
  "ruff",
  "pre-commit",
  "flask>=3.1.2",
]
description = "Add your description here"
name = "chatmock"
readme = "README.md"
requires-python = ">=3.10,<3.11"
version = "0.1.0"

[tool.ruff]
exclude = [
  ".venv",
  "venv",
]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
ignore = [
    # Only ignore this rules
    "COM812", "D203", "D212"
    # Do not add more rules unless absolutely necessary and justified
    ]
select = ["ALL"]

[tool.ruff.lint.per-file-ignores]
# IGNORE AS LITTLE AS POSSIBLE, PREFER FIXING THE ISSUES INSTEAD
# ONLY ADD IGNORES WHEN ABSOLUTELY NECESSARY AND JUSTIFIED
"tests/**" = [
  "S101",  # allow bare assert in tests
  "E402",  # allow import after test-specific setup
  "E501",  # long lines acceptable in test data/fixtures
  "ANN001", "ANN002", "ANN003", "ANN201", "ANN202", "ANN204", "ANN205", "ANN401",  # relax strict annotations in tests
  "ARG001", "ARG002",  # unused arguments in test mocks/fakes are acceptable
  "FBT001", "FBT002", "FBT003",  # boolean positional in test fakes
  "D103",  # test functions don't need docstrings (name is documentation)
  "TC003",  # collections.abc in type-checking blocks
  "PLC0415",  # deferred imports in fixtures
  "PLR0913",  # many arguments in test helpers acceptable
  "PLR2004",  # magic values are acceptable in test assertions
  "SLF001",  # tests need to access private members for testing
  "TRY003", "EM101",  # exception messages in tests don't need extraction
]

[tool.ruff.format]
indent-style = "space"
line-ending = "lf"
quote-style = "preserve"

[tool.coverage.run]
branch = true
concurrency = ['multiprocessing', 'thread']
parallel = true
source = ['chatmock']

[tool.coverage.report]
# IMPORTANT: Coverage must be measured across the entire project/package
# (the whole 'chatmock' package). Do not narrow reporting to single files via
# 'include'; keep coverage project-wide.
fail_under = 100
show_missing = true
skip_covered = true

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "chatmock.routes_openai"
disable_error_code = ["union-attr"]

[[tool.mypy.overrides]]
module = "chatmock.routes_ollama"
disable_error_code = ["union-attr", "return-value"]

[[tool.mypy.overrides]]
module = "chatmock.upstream"
disable_error_code = ["assignment"]
